<?php
namespace BatchManager\Mapper;

use BatchManager\Entity\BatchInterface;
use ZfcBase\Mapper\AbstractDbMapper;
use BatchManager\Persister\BatchPersisterInterface;

class DbBatchMapper extends AbstractDbMapper implements BatchPersisterInterface
{
    protected $tableName;
    
    public function getTableName()
    {
        return $this->tableName;
    }
    
    /**
     * 
     * @param string $tableName
     * @return \BatchManager\Mapper\DbBatchMapper
     */
    public function setTableName($tableName)
    {
        $this->tableName = $tableName;
        return $this;
    }
    
    /**
     *
     * @param BatchInterface $batch
     * @return bool
     */
    public function persistBatch(BatchInterface $batch)
    {
        $newBatch = !$batch->getBid();
        
        if ($newBatch) {
            // here the db has a chance to assign the batch an id
            // (e.g. autogenerated values)
            $this->insert($batch);
        } else {
            $where = array('bid = ?' => $batch->getBid());
            $select = $this->getSelect()->where($where);
            $result = $this->select($select);
            if ($result->count()) {
                // the batch already exist -> update
                $this->update($batch, $where);
            } else {
                $this->insert($batch);
            }
        }
        return $batch;
    }
    
    /**
     *
     * @param mixed $batchId
     * @return bool | BatchInterface
     */
    public function retreiveBatch($batchId, $token)
    {
        $limit = 1;
        $where = array('bid = ?' => $batchId, 'token = ?' => $token);
        $select = $this->getSelect()
                       ->where($where)
                       ->limit($limit);
        $result = $this->select($select);
        if ($result->count()) {
            return $result->current();
        }
        return false;
    }

}